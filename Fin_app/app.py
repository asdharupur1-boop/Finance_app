import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from fpdf import FPDF
from datetime import datetime

# --- Page Configuration ---
st.set_page_config(
    page_title="AI Financial Advisor",
    page_icon="💡",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Financial Analyzer Class (from your notebook) ---
class FinancialAnalyzer:
    """A class to analyze user's financial data."""
    def __init__(self, user_data):
        self.user_data = user_data
        self.monthly_income = user_data.get('monthly_income', 0)
        self.expenses = user_data.get('expenses', {})
        self.investment_pct = user_data.get('investment_percentage', 0)

    def calculate_financial_metrics(self):
        """Calculate key financial metrics."""
        total_expenses = sum(self.expenses.values())
        monthly_savings = self.monthly_income - total_expenses
        desired_investment = self.monthly_income * (self.investment_pct / 100)
        savings_rate = (monthly_savings / self.monthly_income) * 100 if self.monthly_income > 0 else 0
        expense_ratios = {category: (amount / self.monthly_income) * 100 if self.monthly_income > 0 else 0
                         for category, amount in self.expenses.items()}
        
        return {
            'total_expenses': total_expenses,
            'monthly_savings': monthly_savings,
            'desired_investment': desired_investment,
            'savings_rate': savings_rate,
            'expense_ratios': expense_ratios
        }

    def generate_spending_alerts(self, metrics):
        """Generate alerts for high spending categories and low savings."""
        alerts = []
        expense_ratios = metrics['expense_ratios']
        
        # Define thresholds
        high_spending_threshold = 25  # % of income
        
        for category, ratio in expense_ratios.items():
            if ratio >= high_spending_threshold:
                alerts.append({
                    'severity': 'HIGH',
                    'message': f"High Spending: Your spending on **{category.replace('_', ' ').title()}** is **{ratio:.1f}%** of your income, which is quite high. Consider reviewing this category for potential savings."
                })
        
        if metrics['savings_rate'] < 10:
            alerts.append({
                'severity': 'HIGH',
                'message': f"Low Savings Rate: You're currently saving only **{metrics['savings_rate']:.1f}%** of your income. Aiming for at least 15-20% is recommended for strong financial health."
            })
        elif metrics['savings_rate'] < 20:
             alerts.append({
                'severity': 'MEDIUM',
                'message': f"Good Start on Savings: Your savings rate is **{metrics['savings_rate']:.1f}%**. Consider pushing this towards 20% or more to accelerate your financial goals."
            })

        if metrics['desired_investment'] > metrics['monthly_savings']:
            shortfall = metrics['desired_investment'] - metrics['monthly_savings']
            alerts.append({
                'severity': 'HIGH',
                'message': f"Investment Shortfall: Your desired investment of **₹{metrics['desired_investment']:,.0f}** is more than your current savings of **₹{metrics['monthly_savings']:,.0f}**. You have a shortfall of **₹{shortfall:,.0f}**."
            })
            
        return alerts

# --- PDF Report Generation ---
class PDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 15)
        self.cell(0, 10, 'Your Financial Summary Report', 0, 1, 'C')
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')
        
    def chapter_title(self, title):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(4)

    def chapter_body(self, body):
        self.set_font('Arial', '', 11)
        self.multi_cell(0, 10, body)
        self.ln()

def create_pdf_report(metrics, alerts, recommendations_list, health_score):
    pdf = PDF()
    pdf.add_page()
    
    # Developer Details
    pdf.set_font('Arial', 'I', 9)
    pdf.cell(0, 5, "Generated by AI Financial Advisor | Developed by Ayush Shukla", 0, 1, 'C')
    pdf.cell(0, 5, "Contact: shuklaayush552@gmail.com", 0, 1, 'C')
    pdf.ln(10)

    # Date
    pdf.set_font('Arial', '', 10)
    pdf.cell(0, 10, f"Report generated on: {datetime.now().strftime('%Y-%m-%d')}", 0, 1)
    
    # Key Metrics
    pdf.chapter_title("Key Financial Overview")
    metrics_text = (
        f"Monthly Income: INR {metrics.get('monthly_income', 0):,.0f}\n"
        f"Total Monthly Expenses: INR {metrics.get('total_expenses', 0):,.0f}\n"
        f"Monthly Savings: INR {metrics.get('monthly_savings', 0):,.0f}\n"
        f"Savings Rate: {metrics.get('savings_rate', 0):.1f}%\n"
        f"Financial Health Score: {health_score}/100"
    )
    pdf.chapter_body(metrics_text)

    # Alerts
    if alerts:
        pdf.chapter_title("Personal Recommender Alerts")
        for alert in alerts:
            # Strip markdown for PDF
            message = alert['message'].replace('**', '')
            pdf.multi_cell(0, 8, f"- {message}", 0, 1)
        pdf.ln()

    # Recommendations
    pdf.chapter_title("Actionable Recommendations")
    for i, rec in enumerate(recommendations_list, 1):
        # Strip markdown for PDF
        rec_text = rec.replace('**', '').replace('🚀', '').replace('🔧', '').replace('📉', '').replace('📊', '').replace('🧠', '')
        pdf.multi_cell(0, 8, f"{i}.{rec_text.strip()}", 0, 1)
    
    return pdf.output(dest='S').encode('latin-1')


# --- Data & Calculation Functions ---
@st.cache_data
def get_mutual_fund_returns_data():
    """Returns a DataFrame with sample mutual fund data."""
    # This data can be expanded or fetched from an API in a real application
    mf_data = {
        'Category': ['Large Cap', 'Large Cap', 'Flexi Cap', 'Flexi Cap', 'ELSS', 'ELSS', 
                    'Mid Cap', 'Mid Cap', 'Small Cap', 'Small Cap', 'Hybrid', 'Hybrid',
                    'Debt', 'Debt', 'Index', 'Index'],
        'Fund_Name': ['ABC Bluechip Fund', 'XYZ Large Cap Fund', 'PQR Flexi Cap Fund', 
                     'LMN Dynamic Fund', 'Tax Saver Pro', 'Future Growth ELSS',
                     'Mid Cap Opportunities', 'Emerging Stars Fund', 'Small Cap Champion',
                     'Micro Marvel Fund', 'Balanced Advantage', 'Hybrid Wealth',
                     'Corporate Bond Fund', 'Gilt Fund', 'Nifty 50 Index', 'Sensex Index'],
        '1_Year_Return': [12.5, 11.8, 15.2, 14.7, 16.3, 15.8, 18.9, 20.1, 22.5, 24.3, 11.2, 10.8, 7.8, 8.2, 12.1, 11.9],
        '3_Year_CAGR': [14.2, 13.8, 16.5, 15.9, 17.2, 16.8, 19.5, 20.8, 23.1, 25.2, 12.1, 11.7, 8.5, 8.9, 13.8, 13.5],
        '5_Year_CAGR': [13.8, 13.2, 15.8, 15.2, 16.5, 16.1, 18.2, 19.1, 21.5, 23.8, 11.5, 11.2, 8.2, 8.5, 13.2, 12.9],
        'Risk_Level': ['Medium', 'Medium', 'Medium-High', 'Medium-High', 'High', 'High',
                      'High', 'High', 'Very High', 'Very High', 'Low-Medium', 'Low-Medium',
                      'Low', 'Low', 'Medium', 'Medium']
    }
    return pd.DataFrame(mf_data)

def investment_projection_calculator(monthly_investment, years, expected_return):
    """Calculates the future value of a series of monthly investments."""
    monthly_rate = expected_return / 100 / 12
    months = years * 12
    future_value = monthly_investment * (((1 + monthly_rate) ** months - 1) / monthly_rate)
    total_invested = monthly_investment * months
    estimated_gains = future_value - total_invested
    return future_value, total_invested, estimated_gains

# --- UI Layout ---

# --- Sidebar for User Input ---
with st.sidebar:
    st.image("https://i.imgur.com/M5Q24yA.png", width=100)
    st.title("💡 AI Financial Advisor")
    st.write("Enter your financial details to get a personalized analysis and recommendations.")

    with st.expander("💰 **Monthly Income**", expanded=True):
        monthly_income = st.number_input("Take-Home Income (₹)", min_value=0, value=75000, step=1000)

    with st.expander("💸 **Monthly Expenses**"):
        st.subheader("Fixed Expenses")
        rent_emi = st.number_input("Rent/EMI (₹)", min_value=0, value=20000, step=500)
        loan_repayments = st.number_input("Other Loan Repayments (₹)", min_value=0, value=5000, step=500)
        utilities = st.number_input("Utilities (Electricity, Water, Gas) (₹)", min_value=0, value=3000, step=100)
        internet_phone = st.number_input("Internet/Phone (₹)", min_value=0, value=1000, step=50)
        insurance = st.number_input("Insurance Premiums (₹)", min_value=0, value=2000, step=100)
        
        st.subheader("Variable Expenses")
        groceries = st.number_input("Groceries (₹)", min_value=0, value=8000, step=200)
        transportation = st.number_input("Transportation (₹)", min_value=0, value=4000, step=100)
        dining_entertainment = st.number_input("Dining & Entertainment (₹)", min_value=0, value=6000, step=200)
        shopping = st.number_input("Shopping (₹)", min_value=0, value=5000, step=200)
        subscriptions = st.number_input("Subscriptions (₹)", min_value=0, value=1000, step=50)
        miscellaneous = st.number_input("Miscellaneous (₹)", min_value=0, value=2000, step=100)

    with st.expander("📈 **Investment Goal**", expanded=True):
        investment_percentage = st.slider("What % of income do you want to invest?", 0, 100, 20)

    st.markdown("---")
    with st.expander("🔗 **Connect with the Developer**"):
        st.markdown(
            """
            <div style="display: flex; justify-content: space-around; align-items: center; padding: 5px 0;">
                <div style="text-align: left;">
                    <p style="margin: 0; font-weight: bold; font-size: 1em;">Ayush Shukla</p>
                    <p style="margin: 0; font-size: 0.9em; color: #888;">Data Scientist & AI Developer</p>
                </div>
                <div style="display: flex; gap: 15px; align-items: center;">
                    <a href="https://www.linkedin.com/in/ayush-shukla-35a402239/" target="_blank" title="LinkedIn"><img src="https://i.imgur.com/v4pjeS4.png" width="28"></a>
                    <a href="https://github.com/Ayushshukla24" target="_blank" title="GitHub"><img src="https://i.imgur.com/2cn43Xz.png" width="28"></a>
                    <a href="https://ayushshukla-portfolio.netlify.app/" target="_blank" title="Portfolio"><img src="https://i.imgur.com/p1p4i7A.png" width="28"></a>
                    <a href="mailto:shuklaayush552@gmail.com" target="_blank" title="Email"><img src="https://i.imgur.com/P1p8s7a.png" width="28"></a>
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )

# --- Main Dashboard ---
st.header("Your Financial Dashboard")

if monthly_income == 0:
    st.warning("Please enter your monthly income in the sidebar to generate your dashboard.")
else:
    # --- Data Processing ---
    user_expenses = {
        'rent_emi': rent_emi, 'loan_repayments': loan_repayments, 'utilities': utilities,
        'internet_phone': internet_phone, 'insurance': insurance, 'groceries': groceries,
        'transportation': transportation, 'dining_entertainment': dining_entertainment,
        'shopping': shopping, 'subscriptions': subscriptions, 'miscellaneous': miscellaneous
    }
    user_data = {
        'monthly_income': monthly_income,
        'expenses': user_expenses,
        'investment_percentage': investment_percentage
    }

    analyzer = FinancialAnalyzer(user_data)
    metrics = analyzer.calculate_financial_metrics()
    alerts = analyzer.generate_spending_alerts(metrics)

    # --- Tabs ---
    tab1, tab2, tab3 = st.tabs(["📊 **Dashboard Overview**", "📈 **Investment Center**", "💡 **Projections & Recommender**"])

    with tab1:
        # --- Key Metrics Row ---
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("💰 Monthly Income", f"₹{metrics.get('monthly_income', monthly_income):,.0f}")
        col2.metric("💸 Total Expenses", f"₹{metrics['total_expenses']:,.0f}", delta_color="inverse")
        col3.metric("🏦 Monthly Savings", f"₹{metrics['monthly_savings']:,.0f}", delta=f"{metrics['savings_rate']:.1f}% Savings Rate")
        
        # Financial Health Score Gauge
        health_score = min(100, max(0, int(metrics['savings_rate'] * 3.5 + 30)))
        fig_gauge = go.Figure(go.Indicator(
            mode="gauge+number",
            value=health_score,
            title={'text': "Financial Health Score"},
            gauge={'axis': {'range': [None, 100]},
                   'bar': {'color': "#2ca02c"},
                   'steps': [
                       {'range': [0, 40], 'color': "#d62728"},
                       {'range': [40, 70], 'color': "#ff7f0e"},
                       {'range': [70, 100], 'color': "#2ca02c"}],
                   }))
        fig_gauge.update_layout(height=250, margin=dict(l=10, r=10, t=60, b=10))
        col4.plotly_chart(fig_gauge, use_container_width=True)

        st.markdown("---")

        # --- Personal Recommender Alerts ---
        if alerts:
            st.subheader("🔍 Personal Recommender Alerts")
            for alert in alerts:
                if alert['severity'] == 'HIGH':
                    st.error(f"**Alert:** {alert['message']}")
                else:
                    st.warning(f"**Suggestion:** {alert['message']}")
        
        st.markdown("---")
        
        # --- Download Report Section ---
        st.subheader("📥 Summarized Report")
        
        # Need to generate recommendations here for the PDF
        recommendations_for_pdf = []
        if metrics['savings_rate'] < 20:
            recommendations_for_pdf.append("🚀 **Boost Savings:** Your savings rate is below the recommended 20%. Look for areas in your variable expenses (like Dining or Shopping) to cut back.")
        if metrics['desired_investment'] > metrics['monthly_savings']:
             recommendations_for_pdf.append(f"🔧 **Bridge the Gap:** To meet your investment goal, you need to increase your monthly savings by **₹{metrics['desired_investment'] - metrics['monthly_savings']:,.0f}**.")
        high_expense = max(metrics['expense_ratios'], key=metrics['expense_ratios'].get)
        if high_expense and metrics['expense_ratios'][high_expense] > 20:
            recommendations_for_pdf.append(f"📉 **Review Spending:** Your highest expense category is **{high_expense.replace('_', ' ').title()}**. This is a great place to start looking for potential savings.")
        recommendations_for_pdf.append("📊 **Diversify:** Based on historical data, a mix of Equity funds (for growth) and Debt funds (for stability) is often recommended. Assess your risk tolerance before investing.")
        recommendations_for_pdf.append("🧠 **Pay Yourself First:** Automate your investments. Set up a Systematic Investment Plan (SIP) to transfer your investment amount automatically at the start of each month.")

        pdf_data = create_pdf_report(metrics, alerts, recommendations_for_pdf, health_score)
        
        st.download_button(
            label="Download Financial Report (PDF)",
            data=pdf_data,
            file_name=f"Financial_Report_{datetime.now().strftime('%Y%m%d')}.pdf",
            mime="application/pdf"
        )
        
        st.markdown("---")


        # --- Visualizations ---
        col_pie, col_bar = st.columns(2)
        
        with col_pie:
            st.subheader("Expense Breakdown")
            expense_df = pd.DataFrame(list(metrics['expense_ratios'].items()), columns=['Category', 'Percentage'])
            expense_df['Category'] = expense_df['Category'].str.replace('_', ' ').str.title()
            fig_pie = px.pie(expense_df, names='Category', values='Percentage', hole=0.3,
                             title="How You Spend Your Money")
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)

        with col_bar:
            st.subheader("Income vs. Expenses")
            income_df = pd.DataFrame({
                "Category": ["Income", "Expenses", "Savings"],
                "Amount": [monthly_income, metrics['total_expenses'], metrics['monthly_savings']]
            })
            fig_bar = px.bar(income_df, x="Category", y="Amount", color="Category",
                             color_discrete_map={"Income": "green", "Expenses": "red", "Savings": "blue"},
                             title="Your Monthly Cash Flow")
            st.plotly_chart(fig_bar, use_container_width=True)

    with tab2:
        st.subheader("Mutual Fund Performance Analysis")
        st.write("This is informational data to help you understand potential returns across different fund categories. *Past performance is not indicative of future results.*")
        
        mf_df = get_mutual_fund_returns_data()
        category_avg = mf_df.groupby('Category').agg({
            '1_Year_Return': 'mean', '3_Year_CAGR': 'mean', '5_Year_CAGR': 'mean'
        }).reset_index()

        fig_mf = px.bar(category_avg, x='Category', y=['1_Year_Return', '3_Year_CAGR', '5_Year_CAGR'],
                        title="Average Mutual Fund Returns by Category",
                        labels={'value': 'Average Annualized Return (%)', 'variable': 'Time Horizon'},
                        barmode='group')
        st.plotly_chart(fig_mf, use_container_width=True)
        
        col_top, col_risk = st.columns(2)
        with col_top:
            st.subheader("🏆 Top Performers (by 1-Year Return)")
            top_funds = mf_df.loc[mf_df.groupby('Category')['1_Year_Return'].idxmax()]
            st.dataframe(top_funds[['Category', 'Fund_Name', '1_Year_Return', 'Risk_Level']].reset_index(drop=True))
            
        with col_risk:
            st.subheader("⚖️ Risk vs. Return")
            risk_return = mf_df.groupby('Risk_Level')[['5_Year_CAGR']].mean().reset_index().sort_values('5_Year_CAGR')
            st.dataframe(risk_return)


    with tab3:
        st.subheader("💰 Investment Projection Calculator")
        st.write("See how your investments could grow over time based on your desired monthly contribution.")
        
        proj_col1, proj_col2 = st.columns([1,2])

        with proj_col1:
            monthly_investment = metrics['desired_investment']
            st.metric("Desired Monthly Investment", f"₹{monthly_investment:,.0f}")
            
            proj_years = st.slider("Investment Horizon (Years)", 5, 40, 20)
            proj_return = st.slider("Expected Annual Return (%)", 5, 20, 12)

        if monthly_investment > 0:
            future_val, total_inv, gains = investment_projection_calculator(monthly_investment, proj_years, proj_return)
            with proj_col2:
                st.write(f"In **{proj_years} years** at a **{proj_return}%** annual return:")
                met_col1, met_col2, met_col3 = st.columns(3)
                met_col1.metric("Projected Value", f"₹{future_val:,.0f}")
                met_col2.metric("Total Invested", f"₹{total_inv:,.0f}")
                met_col3.metric("Potential Gains", f"₹{gains:,.0f}", delta_color="normal")

                # Create projection data
                years = np.arange(0, proj_years + 1)
                values = [investment_projection_calculator(monthly_investment, y, proj_return)[0] for y in years]
                invested = [monthly_investment * y * 12 for y in years]
                
                proj_df = pd.DataFrame({'Year': years, 'Projected Value': values, 'Total Invested': invested})
                
                fig_proj = go.Figure()
                fig_proj.add_trace(go.Scatter(x=proj_df['Year'], y=proj_df['Projected Value'], mode='lines', name='Projected Portfolio Value', fill='tozeroy'))
                fig_proj.add_trace(go.Scatter(x=proj_df['Year'], y=proj_df['Total Invested'], mode='lines', name='Total Amount Invested'))
                fig_proj.update_layout(title='Portfolio Growth Over Time', xaxis_title='Years', yaxis_title='Value (₹)')
                st.plotly_chart(fig_proj, use_container_width=True)
        else:
            st.warning("Your desired investment amount is zero. Increase your savings or investment percentage to see projections.")

        st.markdown("---")
        st.subheader("💡 Actionable Recommendations")
        st.info(f"**Focus Area:** {'Increase Savings' if metrics['savings_rate'] < 20 else 'Optimize Wealth Building'}")
        
        recommendations = []
        if metrics['savings_rate'] < 20:
            recommendations.append("🚀 **Boost Savings:** Your savings rate is below the recommended 20%. Look for areas in your variable expenses (like Dining or Shopping) to cut back.")
        if metrics['desired_investment'] > metrics['monthly_savings']:
             recommendations.append(f"🔧 **Bridge the Gap:** To meet your investment goal, you need to increase your monthly savings by **₹{metrics['desired_investment'] - metrics['monthly_savings']:,.0f}**.")
        
        high_expense = max(metrics['expense_ratios'], key=metrics['expense_ratios'].get)
        if metrics['expense_ratios'][high_expense] > 20:
            recommendations.append(f"📉 **Review Spending:** Your highest expense category is **{high_expense.replace('_', ' ').title()}**. This is a great place to start looking for potential savings.")

        recommendations.append("📊 **Diversify:** Based on historical data, a mix of Equity funds (for growth) and Debt funds (for stability) is often recommended. Assess your risk tolerance before investing.")
        recommendations.append("🧠 **Pay Yourself First:** Automate your investments. Set up a Systematic Investment Plan (SIP) to transfer your investment amount automatically at the start of each month.")

        for i, rec in enumerate(recommendations, 1):
            st.markdown(f"{i}. {rec}")

